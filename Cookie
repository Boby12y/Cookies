import subprocess
import sys
import os
import sqlite3
from win32crypt import CryptUnprotectData

# Dependencies to be included in requirements.txt
DEPENDENCIES = [
    'pycryptodome',
    'pywin32'
]

# Path to Chrome's cookie database
COOKIE_DB_PATH = os.path.join(os.environ['LOCALAPPDATA'], 'Google', 'Chrome', 'User Data', 'Default', 'Cookies')

def create_requirements_file():
    """Create requirements.txt with the necessary dependencies."""
    with open('requirements.txt', 'w') as f:
        for package in DEPENDENCIES:
            f.write(f"{package}\n")

def install_requirements():
    """Install required packages from requirements.txt."""
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while installing packages: {e}")
        sys.exit(1)

def decrypt_chrome_cookie(encrypted_value):
    """Decrypt the encrypted data using Windows DPAPI."""
    if encrypted_value[:3] != b'v10':
        return None
    
    encrypted_value = encrypted_value[3:]
    try:
        decrypted_value = CryptUnprotectData(encrypted_value, None, None, None, 0)[1]
        return decrypted_value
    except Exception as e:
        print(f"Failed to decrypt cookie: {e}")
        return None

def extract_cookies():
    """Extract cookies from Chrome's database."""
    cookies = []
    try:
        conn = sqlite3.connect(COOKIE_DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT name, encrypted_value FROM cookies')
        
        for name, encrypted_value in cursor.fetchall():
            value = decrypt_chrome_cookie(encrypted_value)
            if value:
                cookies.append((name, value.decode('utf-8')))
        
        conn.close()
    except sqlite3.Error as e:
        print(f"An error occurred while accessing the database: {e}")
        sys.exit(1)
    return cookies

def autofill_data(cookies):
    """Autofill user data (dummy example)."""
    for name, value in cookies:
        print(f'Cookie Name: {name}, Cookie Value: {value}')
    
    # Example of filling in user data
    windows_username = os.getlogin()
    print(f'Windows Username: {windows_username}')

if __name__ == "__main__":
    # Check if requirements.txt exists, create it if not
    if not os.path.isfile('requirements.txt'):
        print("Creating requirements.txt...")
        create_requirements_file()

    # Install dependencies
    install_requirements()

    # Extract cookies and autofill data
    cookies = extract_cookies()
    autofill_data(cookies)
